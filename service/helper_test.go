package service

import (
	"testing"
	"time"

	"github.com/dmitriivoitovich/test-assignment-malwarebytes/repository/db"
)

func TestTravelSpeed(t *testing.T) {
	type testCase struct {
		from          *EventWithLocation
		to            *EventWithLocation
		expectedSpeed uint32
	}

	testCases := []testCase{
		{
			from: &EventWithLocation{
				event:    &db.Event{Timestamp: 0},
				location: &Location{Latitude: 0, Longitude: 0},
			},
			to: &EventWithLocation{
				event:    &db.Event{Timestamp: 0},
				location: &Location{Latitude: 0, Longitude: 0},
			},
			expectedSpeed: 0,
		},
		{
			from: &EventWithLocation{
				event:    &db.Event{Timestamp: 0},
				location: &Location{Latitude: 0, Longitude: 0},
			},
			to: &EventWithLocation{
				event:    &db.Event{Timestamp: 0},
				location: &Location{Latitude: 10, Longitude: 10},
			},
			expectedSpeed: maxUint32,
		},
		{
			from: &EventWithLocation{
				event:    &db.Event{Timestamp: 0},
				location: &Location{Latitude: 0, Longitude: 0},
			},
			to: &EventWithLocation{
				event:    &db.Event{Timestamp: uint64(time.Hour.Seconds() * 18)},
				location: &Location{Latitude: 10, Longitude: 10},
			},
			expectedSpeed: 54,
		},
		{
			from: &EventWithLocation{
				event:    &db.Event{Timestamp: uint64(time.Hour.Seconds() * 18)},
				location: &Location{Latitude: 0, Longitude: 0},
			},
			to: &EventWithLocation{
				event:    &db.Event{Timestamp: 0},
				location: &Location{Latitude: 10, Longitude: 10},
			},
			expectedSpeed: 54,
		},
	}

	for i := range testCases {
		t.Run("", func(t *testing.T) {
			speed := travelSpeed(testCases[i].from, testCases[i].to)
			if speed != testCases[i].expectedSpeed {
				t.Errorf("TravelSpeed test failed: expected to get %v, but got %v", testCases[i].expectedSpeed, speed)
			}
		})
	}
}
