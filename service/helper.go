package service

import (
	"encoding/binary"
	"math"
	"net"

	"github.com/umahmood/haversine"
)

const (
	maxUint32 = ^uint32(0)
)

func ipToUint32(ip net.IP) uint32 {
	if len(ip) == 16 {
		return binary.BigEndian.Uint32(ip[12:16])
	}

	return binary.BigEndian.Uint32(ip)
}

func uint32ToIP(nn uint32) net.IP {
	ip := make(net.IP, 4)
	binary.BigEndian.PutUint32(ip, nn)

	return ip
}

func travelSpeed(from, to *EventWithLocation) uint32 {
	fromCoord := haversine.Coord{
		Lat: from.location.Latitude,
		Lon: from.location.Longitude,
	}

	toCoord := haversine.Coord{
		Lat: to.location.Latitude,
		Lon: to.location.Longitude,
	}

	mi, _ := haversine.Distance(fromCoord, toCoord)

	var seconds uint64
	if from.event.Timestamp < to.event.Timestamp {
		seconds = to.event.Timestamp - from.event.Timestamp
	} else {
		seconds = from.event.Timestamp - to.event.Timestamp
	}

	// ~6.4 times the speed of light!
	if seconds == 0 && mi > 0 {
		return maxUint32
	}

	return uint32(math.Round(mi / (float64(seconds) / 3600)))
}
