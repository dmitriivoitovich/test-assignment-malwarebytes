package service

import (
	"fmt"
	"net"

	"github.com/dmitriivoitovich/test-assignment-malwarebytes/controller/request"
	"github.com/dmitriivoitovich/test-assignment-malwarebytes/controller/response"
	"github.com/dmitriivoitovich/test-assignment-malwarebytes/repository"
	"github.com/dmitriivoitovich/test-assignment-malwarebytes/repository/db"
)

type Event struct {
	geoIPService    *GeoIP
	eventRepository *repository.Event
}

var (
	ErrEventAlreadyExists = fmt.Errorf("event with this ID already exists")
)

func NewEvent(eventRepository *repository.Event, geoIP *GeoIP) *Event {
	return &Event{
		eventRepository: eventRepository,
		geoIPService:    geoIP,
	}
}

func (e *Event) AddEvent(req *request.PostEvent) (*response.PostEvent, error) {
	if err := e.saveEvent(req); err != nil {
		return nil, err
	}

	loc, err := e.geoIPService.LocationByIP(req.IP)
	if err != nil && err != ErrLocationUnknown {
		return nil, err
	}

	resp := &response.PostEvent{
		CurrentGeo: response.CurrentGeo{
			Lat:    loc.Latitude,
			Lon:    loc.Longitude,
			Radius: loc.AccuracyRadius,
		},
		TravelToCurrentGeoSuspicious:   false,
		TravelFromCurrentGeoSuspicious: false,
		PrecedingIPAccess:              nil,
		SubsequentIPAccess:             nil,
	}

	return resp, nil
}

func (e *Event) saveEvent(req *request.PostEvent) error {
	event := &db.Event{
		ID:        req.UUID.Bytes(),
		Username:  req.Username,
		Timestamp: req.Timestamp,
		IP:        ipToUint32(net.ParseIP(req.IP)),
	}

	if err := e.eventRepository.Insert(event); err != nil {
		if db.IsPrimaryKeyConstraintErr(err) {
			return ErrEventAlreadyExists
		}

		return err
	}

	return nil
}
