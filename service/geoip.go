package service

import (
	"fmt"
	"net"

	"github.com/oschwald/geoip2-golang"
)

type IGeoIP interface {
	LocationByIP(net.IP) (*Location, error)
}

type GeoIP struct {
	reader *geoip2.Reader
}

type Location struct {
	AccuracyRadius uint16
	Latitude       float64
	Longitude      float64
}

var (
	ErrLocationUnknown = fmt.Errorf("unable to determine location")
)

func NewGeoIP(path string) (*GeoIP, error) {
	db, err := geoip2.Open(path)
	if err != nil {
		return nil, err
	}

	res := &GeoIP{
		reader: db,
	}

	return res, nil
}

func (s *GeoIP) Close() error {
	if s.reader != nil {
		return s.reader.Close()
	}

	return nil
}

func (s *GeoIP) LocationByIP(ip net.IP) (*Location, error) {
	city, err := s.reader.City(ip)
	if err != nil {
		return nil, err
	}

	if city.Location.Latitude == 0 && city.Location.Longitude == 0 {
		return nil, ErrLocationUnknown
	}

	res := &Location{
		AccuracyRadius: city.Location.AccuracyRadius,
		Latitude:       city.Location.Latitude,
		Longitude:      city.Location.Longitude,
	}

	return res, nil
}
