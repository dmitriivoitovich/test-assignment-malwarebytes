package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"time"

	"github.com/dmitriivoitovich/test-assignment-malwarebytes/controller"
	"github.com/dmitriivoitovich/test-assignment-malwarebytes/repository"
	"github.com/dmitriivoitovich/test-assignment-malwarebytes/repository/db"
	"github.com/dmitriivoitovich/test-assignment-malwarebytes/service"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

const (
	httpPort = "80"

	httpServerShutdownTimeout = time.Second * 30

	httpReadTimeout  = time.Second * 10
	httpWriteTimeout = time.Second * 10
	httpIdleTimeout  = time.Second * 5
	maxHeaderSize    = 1024 * 4

	geoIPDataFilePath = "data/geolite2_city.mmdb"
	sqliteDBFilePath  = "data/db.sqlite"
)

func main() {
	// set app timezone
	time.Local = time.UTC

	// echo instance
	e := echo.New()
	e.HideBanner = true

	// middlewares
	e.Use(middleware.Logger())

	// DB connection
	dbConn, err := db.Connect(sqliteDBFilePath)
	if err != nil {
		log.Fatal(err)
	}

	// init services and controllers
	geoIPService, err := service.NewGeoIP(geoIPDataFilePath)
	if err != nil {
		log.Fatal(err)
	}
	defer geoIPService.Close()

	eventRepository := repository.NewEvent(dbConn)
	eventService := service.NewEvent(eventRepository, geoIPService)
	eventController := controller.NewEvent(eventService)

	// routes
	e.POST("/v1/event", eventController.PostEvent)

	// start http server
	e.Server = &http.Server{
		ReadTimeout:    httpReadTimeout,
		WriteTimeout:   httpWriteTimeout,
		IdleTimeout:    httpIdleTimeout,
		MaxHeaderBytes: maxHeaderSize,
	}

	go func() {
		if err := e.Start(":" + httpPort); err != nil {
			e.Logger.Info("shutting down the http server")
		}
	}()

	// wait for interrupt signal
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt)

	<-quit

	ctx, cancel := context.WithTimeout(context.Background(), httpServerShutdownTimeout)
	defer cancel()

	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}
}
