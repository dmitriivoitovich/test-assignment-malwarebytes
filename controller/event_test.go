package controller

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"

	"github.com/dmitriivoitovich/test-assignment-malwarebytes/controller/response"
	"github.com/dmitriivoitovich/test-assignment-malwarebytes/service"
	"github.com/labstack/echo/v4"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/suite"
)

type EventTestSuite struct {
	suite.Suite

	eventServiceMock *service.EventMock
	eventController  *Event
}

func TestEventTestSuite(t *testing.T) {
	suite.Run(t, new(EventTestSuite))
}

func (suite *EventTestSuite) SetupTest() {
	suite.eventServiceMock = &service.EventMock{}
	suite.eventController = NewEvent(suite.eventServiceMock)
}

func (suite *EventTestSuite) TearDownTest() {
	suite.eventServiceMock.AssertExpectations(suite.T())
}

func (suite *EventTestSuite) TestPostEvent_ReturnsError_InCaseRequestInvalid() {
	e := echo.New()

	requestBody := `{"username":123}`
	req := httptest.NewRequest(http.MethodPost, "/v1/event", strings.NewReader(requestBody))
	req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)

	rec := httptest.NewRecorder()
	c := e.NewContext(req, rec)

	err := suite.eventController.PostEvent(c)
	if suite.Error(err) {
		httpErr, ok := err.(*echo.HTTPError)
		suite.True(ok)
		suite.Equal(echo.ErrBadRequest.Code, httpErr.Code)
	}
}

func (suite *EventTestSuite) TestPostEvent_ReturnsError_InCaseValidationFailed() {
	type testCase struct {
		name             string
		requestBody      string
		expectedResponse string
	}

	testCases := []testCase{
		{
			name:             "username is missing",
			requestBody:      `{"unix_timestamp":1511026500,"event_uuid":"85ad929a-db03-4bf4-9541-8f728fa12e10","ip_address":"8.8.8.8"}`,
			expectedResponse: `PostEvent.Username`,
		},
		{
			name:             "username is empty",
			requestBody:      `{"username":"","unix_timestamp":1511026500,"event_uuid":"85ad929a-db03-4bf4-9541-8f728fa12e10","ip_address":"8.8.8.8"}`,
			expectedResponse: `PostEvent.Username`,
		},
		{
			name:             "username is too long",
			requestBody:      `{"username":"` + strings.Repeat("test", 100) + `","unix_timestamp":1511026500,"event_uuid":"85ad929a-db03-4bf4-9541-8f728fa12e10","ip_address":"8.8.8.8"}`,
			expectedResponse: `PostEvent.Username`,
		},
		{
			name:             "event id is missing",
			requestBody:      `{"username":"test","unix_timestamp":1511026500,"ip_address":"8.8.8.8"}`,
			expectedResponse: `PostEvent.UUID`,
		},
		{
			name:             "IP is missing",
			requestBody:      `{"username":"test","unix_timestamp":1511026500,"event_uuid":"85ad929a-db03-4bf4-9541-8f728fa12e10"}`,
			expectedResponse: `PostEvent.IP`,
		},
		{
			name:             "IP is invalid",
			requestBody:      `{"username":"test","unix_timestamp":1511026500,"event_uuid":"85ad929a-db03-4bf4-9541-8f728fa12e10","ip_address":"888.888.888.888"}`,
			expectedResponse: `PostEvent.IP`,
		},
		{
			name:             "timestamp is missing",
			requestBody:      `{"username":"test","event_uuid":"85ad929a-db03-4bf4-9541-8f728fa12e10","ip_address":"8.8.8.8"}`,
			expectedResponse: `PostEvent.Timestamp`,
		},
	}

	for i := range testCases {
		suite.Run(testCases[i].name, func() {
			e := echo.New()

			req := httptest.NewRequest(http.MethodPost, "/v1/event", strings.NewReader(testCases[i].requestBody))
			req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)

			rec := httptest.NewRecorder()
			c := e.NewContext(req, rec)

			err := suite.eventController.PostEvent(c)
			if suite.Error(err) {
				httpErr, ok := err.(*echo.HTTPError)
				suite.True(ok)
				suite.Equal(echo.ErrBadRequest.Code, httpErr.Code)
				suite.Contains(httpErr.Message, testCases[i].expectedResponse)
			}
		})
	}

}

func (suite *EventTestSuite) TestPostEvent_ReturnsError_InCaseOfDuplicatedEvent() {
	e := echo.New()

	requestBody := `{"username":"test","unix_timestamp":1511026500,"event_uuid":"85ad929a-db03-4bf4-9541-8f728fa12e10","ip_address":"8.8.8.8"}`
	req := httptest.NewRequest(http.MethodPost, "/v1/event", strings.NewReader(requestBody))
	req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)

	rec := httptest.NewRecorder()
	c := e.NewContext(req, rec)

	suite.eventServiceMock.
		On("AddEvent", mock.Anything).
		Return(nil, service.ErrEventAlreadyExists).
		Once()

	err := suite.eventController.PostEvent(c)
	if suite.Error(err) {
		httpErr, ok := err.(*echo.HTTPError)
		suite.True(ok)
		suite.Equal(http.StatusConflict, httpErr.Code)
	}
}

func (suite *EventTestSuite) TestPostEvent_ReturnsError_InCaseOfUnknownLocation() {
	e := echo.New()

	requestBody := `{"username":"test","unix_timestamp":1511026500,"event_uuid":"85ad929a-db03-4bf4-9541-8f728fa12e10","ip_address":"8.8.8.8"}`
	req := httptest.NewRequest(http.MethodPost, "/v1/event", strings.NewReader(requestBody))
	req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)

	rec := httptest.NewRecorder()
	c := e.NewContext(req, rec)

	suite.eventServiceMock.
		On("AddEvent", mock.Anything).
		Return(nil, service.ErrLocationUnknown).
		Once()

	err := suite.eventController.PostEvent(c)
	if suite.Error(err) {
		httpErr, ok := err.(*echo.HTTPError)
		suite.True(ok)
		suite.Equal(http.StatusUnprocessableEntity, httpErr.Code)
	}
}

func (suite *EventTestSuite) TestPostEvent_ReturnsError_InCaseOfInternalError() {
	e := echo.New()

	requestBody := `{"username":"test","unix_timestamp":1511026500,"event_uuid":"85ad929a-db03-4bf4-9541-8f728fa12e10","ip_address":"8.8.8.8"}`
	req := httptest.NewRequest(http.MethodPost, "/v1/event", strings.NewReader(requestBody))
	req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)

	rec := httptest.NewRecorder()
	c := e.NewContext(req, rec)

	suite.eventServiceMock.
		On("AddEvent", mock.Anything).
		Return(nil, fmt.Errorf("expected error")).
		Once()

	err := suite.eventController.PostEvent(c)
	if suite.Error(err) {
		httpErr, ok := err.(*echo.HTTPError)
		suite.True(ok)
		suite.Equal(http.StatusInternalServerError, httpErr.Code)
	}
}

func (suite *EventTestSuite) TestPostEvent_ReturnsResponse_InCaseOfSuccess() {
	e := echo.New()

	requestBody := `{"username":"test","unix_timestamp":1511026500,"event_uuid":"85ad929a-db03-4bf4-9541-8f728fa12e10","ip_address":"8.8.8.8"}`
	req := httptest.NewRequest(http.MethodPost, "/v1/event", strings.NewReader(requestBody))
	req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)

	rec := httptest.NewRecorder()
	c := e.NewContext(req, rec)

	resp := &response.PostEvent{
		CurrentGeo: response.CurrentGeo{
			Lat:    10,
			Lon:    10,
			Radius: 10,
		},
		TravelToCurrentGeoSuspicious:   false,
		TravelFromCurrentGeoSuspicious: false,
		PrecedingIPAccess:              nil,
		SubsequentIPAccess:             nil,
	}

	suite.eventServiceMock.
		On("AddEvent", mock.Anything).
		Return(resp, nil).
		Once()

	err := suite.eventController.PostEvent(c)
	suite.NoError(err)

	expectedRespBody, err := json.Marshal(resp)
	suite.NoError(err)
	suite.Equal(string(expectedRespBody), strings.TrimSpace(rec.Body.String()))
}
