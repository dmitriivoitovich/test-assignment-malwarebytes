package controller

import (
	"net/http"

	"github.com/dmitriivoitovich/test-assignment-malwarebytes/controller/request"
	"github.com/dmitriivoitovich/test-assignment-malwarebytes/controller/response"
	"github.com/dmitriivoitovich/test-assignment-malwarebytes/service"
	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
)

type Event struct {
	validator *validator.Validate
	geoIP     *service.GeoIP
}

func NewEvent(geoIP *service.GeoIP) *Event {
	return &Event{
		validator: validator.New(),
		geoIP:     geoIP,
	}
}

func (e *Event) PostEvent(c echo.Context) error {
	var req request.PostEvent
	if err := c.Bind(&req); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	if err := e.validator.Struct(req); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	loc, err := e.geoIP.LocationByIP(req.IP)
	if err != nil && err != service.ErrLocationUnknown {
		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
	}

	resp := response.PostEvent{
		CurrentGeo: response.CurrentGeo{
			Lat:    loc.Latitude,
			Lon:    loc.Longitude,
			Radius: loc.AccuracyRadius,
		},
		TravelToCurrentGeoSuspicious:   false,
		TravelFromCurrentGeoSuspicious: false,
		PrecedingIPAccess:              nil,
		SubsequentIPAccess:             nil,
	}

	return c.JSON(http.StatusOK, resp)
}
