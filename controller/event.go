package controller

import (
	"net/http"

	"github.com/dmitriivoitovich/test-assignment-malwarebytes/controller/request"
	"github.com/dmitriivoitovich/test-assignment-malwarebytes/service"
	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
)

type Event struct {
	validator    *validator.Validate
	eventService *service.Event
}

func NewEvent(event *service.Event) *Event {
	return &Event{
		validator:    validator.New(),
		eventService: event,
	}
}

func (e *Event) PostEvent(c echo.Context) error {
	// bind request
	var req request.PostEvent
	if err := c.Bind(&req); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// validate request
	if err := e.validator.Struct(req); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// run the service
	resp, err := e.eventService.AddEvent(&req)
	if err != nil {
		if err == service.ErrEventAlreadyExists {
			return echo.NewHTTPError(http.StatusConflict, err.Error())
		}

		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
	}

	// return response
	return c.JSON(http.StatusOK, resp)
}
