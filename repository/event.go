package repository

import (
	"github.com/dmitriivoitovich/test-assignment-malwarebytes/repository/db"
	"gorm.io/gorm"
)

type Event struct {
	db *gorm.DB
}

func NewEvent(db *gorm.DB) *Event {
	return &Event{
		db: db,
	}
}

func (e *Event) Insert(event *db.Event) error {
	return e.db.Create(event).Error
}

func (e *Event) Prev(event *db.Event) (*db.Event, error) {
	res := &db.Event{}

	err := e.db.
		Where("username = ? AND timestamp < ?", event.Username, event.Timestamp).
		Order("timestamp DESC").
		First(res).
		Error
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (e *Event) Next(event *db.Event) (*db.Event, error) {
	res := &db.Event{}

	err := e.db.
		Where("username = ? AND timestamp > ?", event.Username, event.Timestamp).
		Order("timestamp ASC").
		First(res).
		Error
	if err != nil {
		return nil, err
	}

	return res, nil
}
